---

- name: Create keyFile
  copy:
    dest: "{{ mongodb_security_keyfile }}"
    content: "{{ mongodb_keyfile_content }}"
    owner: "{{ mongodb_user }}"
    group: "root"
    mode: 0600
  when:
    - mongodb_replication_replset is defined and mongodb_replication_replset != ''
    - mongodb_keyfile_content is defined and mongodb_keyfile_content != ''
    - mongodb_security_authorization == 'enabled'

- name: set mongodb gid
  group: name={{ mongodb_group }} gid={{ mongodb_gid }} state=present
  when: mongodb_gid

- name: set mongodb uid
  user: name={{ mongodb_user }} uid={{ mongodb_uid }} group={{ mongodb_group }} state=present
  when: mongodb_uid

- name: reset mongodb folder and subfolders with new uid
  file: path={{ mongodb_storage_dbpath }} owner=mongodb group=mongodb follow=yes recurse=yes state=directory
  when: mongodb_uid

- name: Create log dir if missing
  file: state=directory recurse=yes dest={{ mongodb_systemlog_path|dirname }} owner={{ mongodb_user }} group={{ mongodb_group }} mode=0755

- name: Check than logfile exists
  stat: path={{ mongodb_systemlog_path }}
  register: logfile_stat

- name: Create log if missing
  file: state=touch dest={{ mongodb_systemlog_path }} owner={{ mongodb_user }} group={{ mongodb_group }} mode=0755
  when: logfile_stat is defined and not logfile_stat.stat.exists

- name: Ensure dbpath directory
  file:
    path: "{{ mongodb_storage_dbpath }}"
    state: directory
    owner: "{{ mongodb_user }}"
    recurse: yes

- name: Create SSL directory
  file:
    path: "{{ mongodb_ssl_keyfile_path | dirname }}"
    state: directory
    recurse: yes
    owner: 'root'
    group: '{{ mongodb_group }}'
    mode: 0750
  when: mongodb_ssl_cert_source is defined

- name: Make sure the SSL certificate/key file is there
  file:
    path: "{{ mongodb_ssl_keyfile_path }}"
    state: touch
    owner: 'root'
    group: '{{ mongodb_group }}'
    mode: 0640

- name: Get the SSL server certificate for MongoDB
  include_role:
    name: ssl-certificate
    private: yes
  vars:
    ssl_cert_source: '{{ mongodb_ssl_cert_source }}'
    ssl_cert_pem_name: 'mongodb-server'
    ssl_cert_pem_key_directory: '{{ mongodb_ssl_directory }}'
    ssl_cert_pem_cert_directory: '{{ mongodb_ssl_directory }}'
    ssl_cert_pem_key_group: '{{ mongodb_group }}'
    ssl_cert_pem_cert_group: '{{ mongodb_group }}'
    ssl_cert_freeipa_principal_name: MONGODB/{{ ansible_fqdn }}
    ssl_cert_freeipa_post_renew_command: "sed -n w{{ mongodb_ssl_keyfile_path }} {{ mongodb_ssl_directory }}/mongodb-server.key {{ mongodb_ssl_directory }}/mongodb-server.crt"
    ssl_cert_static_pem_cert_content: "{{ mongodb_ssl_certfile_content | default('') }}"
    ssl_cert_static_pem_key_content: "{{ mongodb_ssl_keyfile_content | default('') }}"
    ssl_cert_static_pem_chain_content: "{{ mongodb_ssl_cafile_content | default('') }}"
  when:
    - mongodb_ssl_mode != 'disabled'
    - mongodb_ssl_cert_source is defined

- name: Create server cert file
  copy:
    dest: "{{ mongodb_ssl_keyfile_path }}"
    content: "{{ mongodb_ssl_keyfile_content }}"
    owner: "{{ mongodb_user }}"
    mode: 0600
  when:
    - mongodb_ssl_mode != 'disabled'
    - mongodb_ssl_keyfile_content is defined and mongodb_ssl_keyfile_content != ''
    - mongodb_ssl_cert_source is not defined

- name: Create server CA chain file
  copy:
    dest: "{{ mongodb_ssl_cafile_path }}"
    content: "{{ mongodb_ssl_cafile_content }}"
    owner: "{{ mongodb_user }}"
    mode: 0600
  when:
    - mongodb_ssl_mode != 'disabled'
    - mongodb_ssl_cafile_content is defined and mongodb_ssl_cafile_content != ''
    - mongodb_ssl_cert_source is not defined

- name: Create client cert file
  copy:
    dest: "{{ mongodb_ssl_client_certfile_path }}"
    content: "{{ mongodb_ssl_client_cert_content }}"
    owner: "{{ mongodb_user }}"
    mode: 0600
  when:
    - mongodb_ssl_mode != 'disabled'
    - mongodb_ssl_client_cert_content is defined and mongodb_ssl_client_cert_content != ''
    - mongodb_ssl_cert_source is not defined

- name: Configure mongodb
  template: src=mongod.conf.j2 dest=/etc/mongod.conf backup=yes owner=root group=root mode=0644
  register: config_result

- name: mongodb restart
  service: name={{ mongodb_daemon_name }} state=restarted
  when: config_result|changed and mongodb_manage_service

- name: Ensure service is started
  service: name={{ mongodb_daemon_name }} state=started

- name: Wait when mongodb is started
  wait_for:
    host: "{{ item }}"
    port: "{{ mongodb_net_port }}"
    timeout: 120
  with_items: "{{ mongodb_net_bindip.split(',') | map('replace', '0.0.0.0', '127.0.0.1') | list }}"
